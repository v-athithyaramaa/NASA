import React, { useEffect, useState } from "react";import {  MapContainer,  TileLayer,  Marker,  Popup,  Polyline,  Circle,} from "react-leaflet";import L from "leaflet";import moment from "moment";delete L.Icon.Default.prototype._getIconUrl;L.Icon.Default.mergeOptions({  iconRetinaUrl:    "https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon-2x.png",  iconUrl:    "https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon.png",  shadowUrl:    "https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png",});const issIcon = new L.Icon({  iconUrl:    "data:image/svg+xml;base64," +    btoa(`    <svg width="32" height="32" viewBox="0 0 32 32" xmlns="http://www.w3.org/2000/svg">      <rect x="10" y="14" width="12" height="4" fill="#C0C0C0" stroke="#0a0a0f" stroke-width="1"/>      <rect x="4" y="15" width="24" height="2" fill="#003366" stroke="#0a0a0f" stroke-width="1"/>      <rect x="2" y="13" width="4" height="6" fill="#4080ff" opacity="0.7"/>      <rect x="26" y="13" width="4" height="6" fill="#4080ff" opacity="0.7"/>      <circle cx="16" cy="16" r="8" fill="none" stroke="#00ffff" stroke-width="2" opacity="0.5"/>    </svg>  `),  iconSize: [32, 32],  iconAnchor: [16, 16],  popupAnchor: [0, -16],});const userIcon = new L.Icon({  iconUrl:    "data:image/svg+xml;base64," +    btoa(`    <svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">      <circle cx="10" cy="10" r="8" fill="#ff4444" stroke="#fff" stroke-width="2"/>      <circle cx="10" cy="10" r="3" fill="#fff"/>    </svg>  `),  iconSize: [20, 20],  iconAnchor: [10, 10],  popupAnchor: [0, -10],});const calculateDistance = (lat1, lon1, lat2, lon2) => {  const R = 6371; // Earth's radius in km  const dLat = ((lat2 - lat1) * Math.PI) / 180;  const dLon = ((lon2 - lon1) * Math.PI) / 180;  const a =    Math.sin(dLat / 2) * Math.sin(dLat / 2) +    Math.cos((lat1 * Math.PI) / 180) *      Math.cos((lat2 * Math.PI) / 180) *      Math.sin(dLon / 2) *      Math.sin(dLon / 2);  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));  return R * c;};const ISSWorldMap = ({ issData, trajectoryData, userLocation, passData }) => {  const [mapRef, setMapRef] = useState(null);  const [mapStyle, setMapStyle] = useState("dark");  const [showTrajectory, setShowTrajectory] = useState(true);  const [showFootprint, setShowFootprint] = useState(true);  const [followISS, setFollowISS] = useState(false);  const [selectedPass, setSelectedPass] = useState(null);  const mapStyles = {    satellite: {      url: "https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}",      attribution: "© Esri",    },    street: {      url: "https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png",      attribution: "© OpenStreetMap contributors",    },    dark: {      url: "https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png",      attribution: "© CartoDB",    },    terrain: {      url: "https://{s}.tile.opentopomap.org/{z}/{x}/{y}.png",      attribution: "© OpenTopoMap",    },  };  useEffect(() => {    if (followISS && issData && mapRef) {      mapRef.setView([issData.latitude, issData.longitude], mapRef.getZoom(), {        animate: true,        duration: 2.0,      });    }  }, [issData, followISS, mapRef]);  const trajectoryCoords =    trajectoryData?.map((point) => [point.latitude, point.longitude]) || [];  const footprintRadius = issData ? issData.footprint * 1000 : 0; // Convert to meters  const GroundTrackMarkers = () => {    if (!showTrajectory || !trajectoryData || trajectoryData.length === 0)      return null;    const pointsToShow = trajectoryData.filter((_, index) => index % 20 === 0);    return pointsToShow.map((point, index) => (      <Circle        key={index}        center={[point.latitude, point.longitude]}        radius={20000} // 20km radius for visibility        pathOptions={{          color: "#ffff00",          fillColor: "#ffff00",          fillOpacity: 0.1,          weight: 1,          opacity: 0.6,        }}      >        <Popup>          <div>            <strong>ISS Position at T+{index * 20}s</strong>            <br />            Time: {moment.unix(point.timestamp).format("HH:mm:ss UTC")}            <br />            Lat: {point.latitude.toFixed(4)}°<br />            Lon: {point.longitude.toFixed(4)}°<br />            Alt: {Math.round(point.altitude)} km          </div>        </Popup>      </Circle>    ));  };  const PassPredictions = () => {    if (!passData || passData.length === 0 || !userLocation.lat) return null;    return passData.slice(0, 3).map((pass, index) => (      <Circle        key={index}        center={[userLocation.lat, userLocation.lon]}        radius={500000} // 500km visibility radius        pathOptions={{          color: index === 0 ? "#00ff00" : "#ffaa00",          fillColor: index === 0 ? "#00ff00" : "#ffaa00",          fillOpacity: 0.05,          weight: 2,          opacity: 0.7,          dashArray: index === 0 ? null : "10, 10",        }}      >        <Popup>          <div>            <strong>{index === 0 ? "Next Pass" : `Pass ${index + 1}`}</strong>            <br />            Start: {moment(pass.startTime).format("MMM DD, HH:mm")}            <br />            Duration: {Math.round(pass.duration / 60)} minutes            <br />            Max Elevation: {Math.round(pass.maxElevation || 0)}°          </div>        </Popup>      </Circle>    ));  };  if (!issData) {    return (      <div className="map-loading">        <p>Loading ISS position data...</p>      </div>    );  }  return (    <div className="iss-world-map">      {}      <div className="map-controls">        <div className="control-group">          <label>Map Style:</label>          <select            value={mapStyle}            onChange={(e) => setMapStyle(e.target.value)}            className="map-style-select"          >            <option value="dark">Dark</option>            <option value="satellite">Satellite</option>            <option value="street">Street</option>            <option value="terrain">Terrain</option>          </select>        </div>        <div className="control-group">          <label className="checkbox-label">            <input              type="checkbox"              checked={showTrajectory}              onChange={(e) => setShowTrajectory(e.target.checked)}            />            Show Trajectory          </label>        </div>        <div className="control-group">          <label className="checkbox-label">            <input              type="checkbox"              checked={showFootprint}              onChange={(e) => setShowFootprint(e.target.checked)}            />            Show Footprint          </label>        </div>        <div className="control-group">          <label className="checkbox-label">            <input              type="checkbox"              checked={followISS}              onChange={(e) => setFollowISS(e.target.checked)}            />            Follow ISS          </label>        </div>      </div>      {}      <MapContainer        whenCreated={setMapRef}        center={[issData.latitude, issData.longitude]}        zoom={4}        minZoom={2}        maxZoom={12}        scrollWheelZoom={true}        worldCopyJump={true} // Ensures path wraps around the map correctly        className="leaflet-map"      >        {}        <TileLayer          url={mapStyles[mapStyle].url}          attribution={mapStyles[mapStyle].attribution}          noWrap={true}        />        {}        {showTrajectory && trajectoryCoords.length > 0 && (          <Polyline            positions={trajectoryCoords}            pathOptions={{              color: "#ffff00",              weight: 3,              opacity: 0.8,            }}          />        )}        {}        {}        <Marker position={[issData.latitude, issData.longitude]} icon={issIcon}>          <Popup className="iss-popup">            <div className="iss-popup-content">              <h3>International Space Station</h3>              <div className="iss-data">                <div className="data-row">                  <span className="label">Position:</span>                  <span className="value">                    {issData.latitude.toFixed(4)}°,{" "}                    {issData.longitude.toFixed(4)}°                  </span>                </div>                <div className="data-row">                  <span className="label">Altitude:</span>                  <span className="value">                    {Math.round(issData.altitude)} km                  </span>                </div>                <div className="data-row">                  <span className="label">Velocity:</span>                  <span className="value">                    {Math.round(issData.velocity)} km/h                  </span>                </div>                <div className="data-row">                  <span className="label">Visibility:</span>                  <span className="value">{issData.visibility}</span>                </div>                <div className="data-row">                  <span className="label">Last Update:</span>                  <span className="value">                    {moment.unix(issData.timestamp).format("HH:mm:ss UTC")}                  </span>                </div>              </div>            </div>          </Popup>        </Marker>        {}        {showFootprint && (          <Circle            center={[issData.latitude, issData.longitude]}            radius={footprintRadius}            pathOptions={{              color: "#00ffff",              fillColor: "#00ffff",              fillOpacity: 0.1,              weight: 2,              opacity: 0.8,            }}          />        )}        {}        {userLocation.lat && userLocation.lon && (          <Marker            position={[userLocation.lat, userLocation.lon]}            icon={userIcon}          >            <Popup>              <div>                <strong>Your Location</strong>                <br />                {userLocation.lat.toFixed(4)}°, {userLocation.lon.toFixed(4)}°              </div>            </Popup>          </Marker>        )}        {}        <PassPredictions />      </MapContainer>      {}      <div className="map-legend">        <h4>Legend</h4>        <div className="legend-item">          <div            className="legend-color"            style={{ backgroundColor: "#00ffff" }}          ></div>          <span>ISS Footprint</span>        </div>        <div className="legend-item">          <div            className="legend-color"            style={{ backgroundColor: "#ffff00" }}          ></div>          <span>Orbital Trajectory</span>        </div>        <div className="legend-item">          <div            className="legend-color"            style={{ backgroundColor: "#ff4444" }}          ></div>          <span>Your Location</span>        </div>        <div className="legend-item">          <div            className="legend-color"            style={{ backgroundColor: "#00ff00" }}          ></div>          <span>Next Pass Visibility</span>        </div>      </div>      {}      <div className="map-stats">        <h4>Current Status</h4>        <div className="stat-item">          <span className="stat-label">Speed:</span>          <span className="stat-value">            {Math.round(issData.velocity)} km/h          </span>        </div>        <div className="stat-item">          <span className="stat-label">Altitude:</span>          <span className="stat-value">{Math.round(issData.altitude)} km</span>        </div>        <div className="stat-item">          <span className="stat-label">Distance to You:</span>          <span className="stat-value">            {userLocation.lat && userLocation.lon              ? Math.round(                  calculateDistance(                    userLocation.lat,                    userLocation.lon,                    issData.latitude,                    issData.longitude                  )                )              : "N/A"}{" "}            km          </span>        </div>      </div>    </div>  );};export default ISSWorldMap;