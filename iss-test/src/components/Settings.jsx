import React, { useState, useEffect } from "react";import {  Settings as SettingsIcon,  Monitor,  Bell,  Globe,  Download,  Upload,  Trash2,  RotateCcw,  Database,  Palette,  Volume2,  Clock,  MapPin,  Eye,  Zap,} from "lucide-react";const Settings = ({ onClose, onPreferencesChange }) => {  const [preferences, setPreferences] = useState({    autoUpdate: true,    updateInterval: 30000,    units: "metric",    language: "en",    soundEnabled: true,    theme: "dark",    selectedView: "3d",    showOrbitalPath: true,    showGroundTrack: true,    autoRotate3D: true,    notifications: true,    passNotifications: true,    proximityNotifications: true,    userLocation: { lat: 40.7128, lon: -74.006 },  });  const [storageInfo, setStorageInfo] = useState({    totalSize: 512000, // 500 KB mock    usagePercentage: 10,  });  const [activeTab, setActiveTab] = useState("general");  useEffect(() => {    loadPreferences();    loadStorageInfo();  }, []);  const loadPreferences = () => {  };  const loadStorageInfo = () => {  };  const handlePreferenceChange = (key, value) => {    const updated = { ...preferences, [key]: value };    setPreferences(updated);    if (onPreferencesChange) {      onPreferencesChange(updated);    }  };  const handleExportData = () => {    const data = {      preferences: preferences,      history: ["mock_data_1", "mock_data_2"],    };    if (data) {      const blob = new Blob([JSON.stringify(data, null, 2)], {        type: "application/json",      });      const url = URL.createObjectURL(blob);      const link = document.createElement("a");      link.href = url;      link.download = `iss-tracker-backup-${        new Date().toISOString().split("T")[0]      }.json`;      document.body.appendChild(link);      link.click();      document.body.removeChild(link);      URL.revokeObjectURL(url);    } else {    }  };  const handleImportData = (event) => {    const file = event.target.files[0];    if (!file) return;    const reader = new FileReader();    reader.onload = (e) => {      try {        const data = JSON.parse(e.target.result);      } catch {      }    };    reader.readAsText(file);  };  const handleClearData = () => {    if (      window.confirm(        "Are you sure you want to clear all data? This action cannot be undone."      )    ) {      setPreferences({});      setStorageInfo({ totalSize: 0, usagePercentage: 0 });    }  };  const handleResetDefaults = () => {    if (window.confirm("Reset all preferences to default values?")) {    }  };  const formatBytes = (bytes) => {    if (bytes === 0) return "0 Bytes";    const k = 1024;    const sizes = ["Bytes", "KB", "MB", "GB"];    const i = Math.floor(Math.log(bytes) / Math.log(k));    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + " " + sizes[i];  };  const tabs = [    { id: "general", label: "General", icon: SettingsIcon },    { id: "display", label: "Display", icon: Monitor },    { id: "notifications", label: "Notifications", icon: Bell },    { id: "location", label: "Location", icon: MapPin },    { id: "data", label: "Data & Storage", icon: Database },  ];  const renderGeneralTab = () => (    <div className="settings-tab-content">      <div className="setting-group">        <h4>          <Clock size={20} /> Updates & Timing        </h4>        <div className="setting-item">          <label className="setting-label">            <input              type="checkbox"              checked={preferences.autoUpdate || false}              onChange={(e) =>                handlePreferenceChange("autoUpdate", e.target.checked)              }            />            Enable automatic updates          </label>          <span className="setting-description">            Automatically fetch new ISS data          </span>        </div>        <div className="setting-item">          <label className="setting-label">Update interval</label>          <select            value={preferences.updateInterval || 30000}            onChange={(e) =>              handlePreferenceChange("updateInterval", parseInt(e.target.value))            }          >            <option value={15000}>15 seconds</option>            <option value={30000}>30 seconds</option>            <option value={60000}>1 minute</option>            <option value={300000}>5 minutes</option>          </select>        </div>      </div>      <div className="setting-group">        <h4>          <Globe size={20} /> Units & Language        </h4>        <div className="setting-item">          <label className="setting-label">Measurement units</label>          <select            value={preferences.units || "metric"}            onChange={(e) => handlePreferenceChange("units", e.target.value)}          >            <option value="metric">Metric (km, km/h)</option>            <option value="imperial">Imperial (mi, mph)</option>          </select>        </div>        <div className="setting-item">          <label className="setting-label">Language</label>          <select            value={preferences.language || "en"}            onChange={(e) => handlePreferenceChange("language", e.target.value)}          >            <option value="en">English</option>            <option value="es">Español</option>            <option value="fr">Français</option>            <option value="de">Deutsch</option>            <option value="zh">中文</option>          </select>        </div>      </div>      <div className="setting-group">        <h4>          <Volume2 size={20} /> Audio        </h4>        <div className="setting-item">          <label className="setting-label">            <input              type="checkbox"              checked={preferences.soundEnabled || false}              onChange={(e) =>                handlePreferenceChange("soundEnabled", e.target.checked)              }            />            Enable sound effects          </label>          <span className="setting-description">            Play sounds for notifications and events          </span>        </div>      </div>    </div>  );  const renderDisplayTab = () => (    <div className="settings-tab-content">      <div className="setting-group">        <h4>          <Palette size={20} /> Theme & Appearance        </h4>        <div className="setting-item">          <label className="setting-label">Theme</label>          <select            value={preferences.theme || "dark"}            onChange={(e) => handlePreferenceChange("theme", e.target.value)}          >            <option value="dark">Dark</option>            <option value="light">Light</option>            <option value="auto">Auto (system)</option>          </select>        </div>        <div className="setting-item">          <label className="setting-label">Default view</label>          <select            value={preferences.selectedView || "3d"}            onChange={(e) =>              handlePreferenceChange("selectedView", e.target.value)            }          >            <option value="3d">3D Tracker</option>            <option value="map">World Map</option>            <option value="data">Command Center</option>          </select>        </div>      </div>      <div className="setting-group">        <h4>          <Eye size={20} /> 3D Visualization        </h4>        <div className="setting-item">          <label className="setting-label">            <input              type="checkbox"              checked={preferences.showOrbitalPath || false}              onChange={(e) =>                handlePreferenceChange("showOrbitalPath", e.target.checked)              }            />            Show orbital path          </label>        </div>        <div className="setting-item">          <label className="setting-label">            <input              type="checkbox"              checked={preferences.showGroundTrack || false}              onChange={(e) =>                handlePreferenceChange("showGroundTrack", e.target.checked)              }            />            Show ground track          </label>        </div>        <div className="setting-item">          <label className="setting-label">            <input              type="checkbox"              checked={preferences.autoRotate3D || false}              onChange={(e) =>                handlePreferenceChange("autoRotate3D", e.target.checked)              }            />            Auto-rotate 3D view          </label>        </div>      </div>    </div>  );  const renderNotificationsTab = () => (    <div className="settings-tab-content">      <div className="setting-group">        <h4>          <Bell size={20} /> Notification Settings        </h4>        <div className="setting-item">          <label className="setting-label">            <input              type="checkbox"              checked={preferences.notifications || false}              onChange={(e) =>                handlePreferenceChange("notifications", e.target.checked)              }            />            Enable all notifications          </label>          <span className="setting-description">            Receive alerts for ISS events          </span>        </div>        <div className="setting-item">          <label className="setting-label">            <input              type="checkbox"              checked={preferences.passNotifications || false}              onChange={(e) =>                handlePreferenceChange("passNotifications", e.target.checked)              }            />            ISS pass notifications          </label>          <span className="setting-description">            Alert when ISS passes over your location          </span>        </div>        <div className="setting-item">          <label className="setting-label">            <input              type="checkbox"              checked={preferences.proximityNotifications || false}              onChange={(e) =>                handlePreferenceChange(                  "proximityNotifications",                  e.target.checked                )              }            />            Proximity notifications          </label>          <span className="setting-description">Alert when ISS is nearby</span>        </div>      </div>    </div>  );  const renderLocationTab = () => (    <div className="settings-tab-content">      <div className="setting-group">        <h4>          <MapPin size={20} /> Location Settings        </h4>        <div className="setting-item">          <label className="setting-label">Current location</label>          {preferences.userLocation?.lat ? (            <div className="location-display">              <span>                {preferences.userLocation.lat.toFixed(4)}°,{" "}                {preferences.userLocation.lon.toFixed(4)}°              </span>              <button                className="location-btn"                onClick={() => {                  if (navigator.geolocation) {                    navigator.geolocation.getCurrentPosition((position) => {                      const location = {                        lat: position.coords.latitude,                        lon: position.coords.longitude,                      };                      handlePreferenceChange("userLocation", location);                    });                  }                }}              >                Update              </button>            </div>          ) : (            <button              className="location-btn"              onClick={() => {                if (navigator.geolocation) {                  navigator.geolocation.getCurrentPosition((position) => {                    const location = {                      lat: position.coords.latitude,                      lon: position.coords.longitude,                    };                    handlePreferenceChange("userLocation", location);                  });                }              }}            >              Get Current Location            </button>          )}          <span className="setting-description">            Used for pass predictions and proximity alerts          </span>        </div>      </div>    </div>  );  const renderDataTab = () => (    <div className="settings-tab-content">      <div className="setting-group">        <h4>          <Database size={20} /> Storage Information        </h4>        <div className="storage-info-display">          <div className="storage-stat">            <span className="stat-label">Total Usage:</span>            <span className="stat-value">              {formatBytes(storageInfo.totalSize)}            </span>          </div>          <div className="storage-stat storage-bar-row">            <span className="stat-label">Usage:</span>            <div className="storage-bar">              <div                className="storage-fill"                style={{                  width: `${Math.min(storageInfo.usagePercentage, 100)}%`,                }}              />            </div>            <span className="stat-value">              {storageInfo.usagePercentage?.toFixed(1)}%            </span>          </div>        </div>      </div>      <div className="setting-group">        <h4>          <Zap size={20} /> Data Management        </h4>        <div className="setting-actions">          <button className="setting-btn export" onClick={handleExportData}>            <Download size={16} />            Export Data          </button>          <label className="setting-btn import">            <Upload size={16} />            Import Data            <input              type="file"              accept=".json"              onChange={handleImportData}              style={{ display: "none" }}            />          </label>          <button className="setting-btn reset" onClick={handleResetDefaults}>            <RotateCcw size={16} />            Reset to Defaults          </button>          <button className="setting-btn danger" onClick={handleClearData}>            <Trash2 size={16} />            Clear All Data          </button>        </div>      </div>    </div>  );  return (    <div className="settings-overlay">      <div className="settings-modal">        <div className="settings-header">          <h2>Settings & Preferences</h2>          <button className="close-btn" onClick={onClose}>            ×          </button>        </div>        <div className="settings-content">          <div className="settings-tabs">            {tabs.map((tab) => {              const IconComponent = tab.icon;              return (                <button                  key={tab.id}                  className={`tab-btn ${activeTab === tab.id ? "active" : ""}`}                  onClick={() => setActiveTab(tab.id)}                >                  <IconComponent size={18} />                  <span>{tab.label}</span>                </button>              );            })}          </div>          <div className="settings-panel">            {activeTab === "general" && renderGeneralTab()}            {activeTab === "display" && renderDisplayTab()}            {activeTab === "notifications" && renderNotificationsTab()}            {activeTab === "location" && renderLocationTab()}            {activeTab === "data" && renderDataTab()}          </div>        </div>        <div className="settings-footer">          <p>ISS Tracker v2.0 - Enhanced with comprehensive features</p>        </div>      </div>    </div>  );};export default Settings;